const AWS = require('aws-sdk');

var Ec2Controller = function(tagName) {
  this.tagName = tagName;
  this.enableStates = ['pending', 'running', 'stopping', 'stopped'];
}

Ec2Controller.prototype.start = function() {
  this.select(this.enableStates, function(instanceIds) {
    if (instanceIds.length > 0) {
      var ec2 = new AWS.EC2();
      ec2.startInstances({InstanceIds: instanceIds}, function(err, data) {
        if (err) console.log(err, err.stack);
        else     console.log(data);
      });
    } else {
      console.info("No instance has been specified to launch.");
    }
  });
}

Ec2Controller.prototype.stop = function() {
  this.select(this.enableStates, function(instanceIds) {
    if (instanceIds.length > 0) {
      var ec2 = new AWS.EC2();
      ec2.stopInstances({InstanceIds: instanceIds}, function(err, data) {
        if (err) console.log(err, err.stack);
        else     console.log(data);
      });
    } else {
      console.info("No instance has been specified to stop.");
    }
  });
}

Ec2Controller.prototype.select = function(enableStates, func) {

  var ec2 = new AWS.EC2();
  var params = {
    Filters: [{
      Name: `tag:${this.tagName}`,
      Values: ['ON', 'On', 'on', 'TRUE', 'True', 'true', '1']
    }]
  };

  ec2.describeInstances(params, function(err, data) {
    if (err) {
      console.log(err, err.stack);
    } else {
      var instanceIds = [];
      data.Reservations.forEach(function (reservation) {
        reservation.Instances.forEach(function (instance) {
          if (enableStates.indexOf(instance.State.Name) >= 0) {
            instanceIds.push(instance.InstanceId);
          }
        });
      });

      func(instanceIds);
    }
  });
}

module.exports = Ec2Controller;
